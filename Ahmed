using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public delegate void TransactionAlert(string message);   //Delegates to show message 


class Person
{
    private string name;
    private int age;

    public string Name
    {
        get { return name; }
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new Exception("Name cannot be empty");   //Exception Handling
            name = value;
        }
    }
    public int Age
    {
        get { return age; }
        set
        {
            if (value < 1)
                throw new Exception("Age cannot be negative");   //Exception Handling
            age = value;
        }
    }
}

class Customer : Person
{
    public string AccountNumber { get; set; }
    public List<Transaction> Transactions { get; set; } = new List<Transaction>();
    private decimal balance;

    public decimal Balance
    {
        get { return balance; }
        set
        {
            if (value < 0)
                throw new Exception("Balance cannot be less than 0");   //Exception Handling
            balance = value;
        }
    }

    public override string ToString() =>
        $"Customer: {Name}, Age: {Age}, Account: {AccountNumber}, Balance: {Balance:C}";
}

class Transaction
{
    private DateTime date;
    private string type;
    private decimal amount;

    public DateTime Date
    {
        get { return date; }
        set { date = value; }
    }

    public string Type
    {
        get { return type; }
        set { type = value; }
    }

    public decimal Amount
    {
        get { return amount; }
        set { amount = value; }
    }

    public override string ToString() =>
        $"{Date:yyyy-MM-dd HH:mm} - {Type} - {Amount:C}";
}


class BankData<T>
{
    public List<T> Items { get; set; } = new List<T>();
    public void AddItem(T item) => Items.Add(item);
    public List<T> GetAll() => Items;              //LINQ
    public void RemoveItem(T item) => Items.Remove(item);
}

class FileService
{
    private string filePath;

    public FileService(string filePath)
    {
        this.filePath = filePath;
    }

    public void SaveAccounts(BankData<Customer> customers, TransactionAlert alert)
    {
        try
        {
            using (var sw = new StreamWriter(filePath))
            {
                foreach (var c in customers.GetAll())
                {
                    sw.WriteLine($"{c.Name}|{c.Age}|{c.AccountNumber}|{c.Balance}|{string.Join(";", c.Transactions.Select(t => $"{t.Date:O},{t.Type},{t.Amount}"))}");
                }
            }
            alert?.Invoke("Accounts saved to file.");
        }
        catch (IOException ex)                        //Exception Handling
        {
            Console.WriteLine($"File error: {ex.Message}");
        }
    }

    public void LoadAccounts(BankData<Customer> customers)
    {
        if (!File.Exists(filePath)) return;       //if file not define , return

        try
        {
            foreach (var line in File.ReadAllLines(filePath))
            {
                var parts = line.Split('|');
                var customer = new Customer
                {
                    Name = parts[0],
                    Age = int.Parse(parts[1]),     //parse??
                    AccountNumber = parts[2],
                    Balance = decimal.Parse(parts[3])
                };

                if (parts.Length > 4 && !string.IsNullOrWhiteSpace(parts[4]))
                {
                    foreach (var t in parts[4].Split(';'))
                    {
                        var tparts = t.Split(',');
                        customer.Transactions.Add(new Transaction
                        {
                            Date = DateTime.Parse(tparts[0]),
                            Type = tparts[1],
                            Amount = decimal.Parse(tparts[2])
                        });
                    }
                }
                customers.AddItem(customer);
            }
        }
        catch (Exception ex)                 //Exception Handling
        {
            Console.WriteLine($"Error loading accounts: {ex.Message}");
        }
    }
}

class BankService
{
    private BankData<Customer> customers;      //customer list
    private FileService fileService;
    private TransactionAlert alert;
    private int nextAccountNumber;

    public BankService(string filePath, TransactionAlert alert)   //constructor
    {
        this.customers = new BankData<Customer>();
        this.fileService = new FileService(filePath);
        this.alert = alert;
        this.nextAccountNumber = 10000001;
        LoadAccounts();
    }

    public void LoadAccounts()
    {
        fileService.LoadAccounts(customers);
    }

    public void SaveAccounts()
    {
        fileService.SaveAccounts(customers, alert);
    }

    public void CreateAccount(string name, int age)
    {
        string accountNumber = (nextAccountNumber++).ToString();
        var customer = new Customer { Name = name, Age = age, Balance = 0, AccountNumber = accountNumber };
        customers.AddItem(customer);
        alert?.Invoke($"Account created successfully! Account Number: {accountNumber}");
        SaveAccounts();
    }

    public void Deposit(Customer customer, decimal amount)
    {
        customer.Balance += amount;
        customer.Transactions.Add(new Transaction { Date = DateTime.Now, Type = "Deposit", Amount = amount });  //add new transaction
        alert?.Invoke("Deposit successful!");
        SaveAccounts();
    }

    public void Withdraw(Customer customer, decimal amount)                                                  
    {
        if (amount > customer.Balance)
            throw new Exception("Insufficient balance");

        customer.Balance -= amount;
        customer.Transactions.Add(new Transaction { Date = DateTime.Now, Type = "Withdraw", Amount = amount }); //add new transaction
        alert?.Invoke("Withdraw successful!");
        SaveAccounts();
    }
    // search operators
    public Customer FindCustomerByName(string name)
    {
        return customers.GetAll().FirstOrDefault(c => c.Name.Equals(name, StringComparison.OrdinalIgnoreCase));  //LINQ
    }

    public Customer FindCustomerByAccount(string accountNumber)
    {
        return customers.GetAll().FirstOrDefault(c => c.AccountNumber == accountNumber);
    }

    public List<Customer> GetAllCustomers()
    {
        return customers.GetAll();
    }

    public List<Transaction> GetAllTransactions()
    {                    //merg all customer transactions                                                                                                               //list by date
        return customers.GetAll().SelectMany(c => c.Transactions.Select(t => new Transaction { Date = t.Date, Type = t.Type, Amount = t.Amount })).OrderByDescending(t => t.Date).ToList();
    }
    //filter operations
    public List<Transaction> FilterTransactionsByDate(Customer customer, DateTime date)
    {
        return customer.Transactions.Where(t => t.Date.Date == date.Date).ToList();
    }

    public List<Transaction> FilterTransactionsByType(Customer customer, string type)
    {
        return customer.Transactions.Where(t => t.Type.Equals(type, StringComparison.OrdinalIgnoreCase)).ToList();
    }
    //calculate operations
    public (decimal deposits, decimal withdrawals) CalculateTotals(Customer customer)
    {
        var totalDeposits = customer.Transactions.Where(t => t.Type.Equals("Deposit", StringComparison.OrdinalIgnoreCase)).Sum(t => t.Amount);

        var totalWithdrawals = customer.Transactions.Where(t => t.Type.Equals("Withdraw", StringComparison.OrdinalIgnoreCase)).Sum(t => t.Amount);

        return (totalDeposits, totalWithdrawals);
    }
}

class UserInterface
{
    private BankService bankService;
    private TransactionAlert alert;

    public UserInterface(BankService bankService, TransactionAlert alert)
    {
        this.bankService = bankService;
        this.alert = alert;
    }

    public void ShowMainMenu()
    {
        while (true)
        {
            Console.WriteLine("\n=== BANK SYSTEM ===");
            Console.WriteLine("1. Customer Login");
            Console.WriteLine("2. Admin Login");
            Console.WriteLine("3. Exit");
            Console.Write("Choose: ");

            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    ShowCustomerMenu();
                    break;
                case "2":
                    ShowAdminMenu();
                    break;
                case "3":
                    bankService.SaveAccounts();
                    return;
                default:
                    Console.WriteLine("Invalid choice");
                    break;
            }
        }
    }

    private void ShowAdminMenu()
    {
        Console.WriteLine("\n=== ADMIN MENU ===");
        Console.WriteLine("Welcome Admin!");

        while (true)
        {
            Console.WriteLine("\n1. View all accounts");
            Console.WriteLine("2. View all transactions");
            Console.WriteLine("3. Search customer by name");
            Console.WriteLine("4. Search customer by account number");
            Console.WriteLine("5. Filter transactions");
            Console.WriteLine("6. Calculate totals");
            Console.WriteLine("7. Back to main menu");
            Console.Write("Choose: ");

            string choice = Console.ReadLine();

            try
            {
                switch (choice)
                {
                    case "1": ViewAllAccounts(); break;
                    case "2": ViewAllTransactions(); break;
                    case "3": SearchCustomerByName(); break;
                    case "4": SearchCustomerByAccount(); break;
                    case "5": FilterTransactions(); break;
                    case "6": CalculateTotals(); break;
                    case "7": return;
                    default: Console.WriteLine("Invalid choice"); break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    private void ShowCustomerMenu()
    {
        Console.WriteLine("\n=== CUSTOMER MENU ===");

        while (true)
        {
            Console.WriteLine("\n1. Create new account");
            Console.WriteLine("2. Deposit");
            Console.WriteLine("3. Withdraw");
            Console.WriteLine("4. Show balance");
            Console.WriteLine("5. Back to main menu");
            Console.Write("Choose: ");

            string choice = Console.ReadLine();

            try
            {
                switch (choice)
                {
                    case "1": CreateAccount(); break;
                    case "2": Deposit(); break;
                    case "3": Withdraw(); break;
                    case "4": ShowBalance(); break;
                    case "5": return;
                    default: Console.WriteLine("Invalid choice"); break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }

    private void ViewAllAccounts()
    {
        Console.WriteLine("\n=== ALL ACCOUNTS ===");
        var customers = bankService.GetAllCustomers();

        if (customers.Count == 0)
        {
            Console.WriteLine("No accounts found.");
            return;
        }

        foreach (var customer in customers)
        {
            Console.WriteLine($"Name: {customer.Name}, Account: {customer.AccountNumber}, Balance: {customer.Balance:C}");
        }
        Console.WriteLine($"Total Accounts: {customers.Count}");
    }

    private void ViewAllTransactions()
    {
        Console.WriteLine("\n=== ALL TRANSACTIONS ===");
        var allTransactions = bankService.GetAllCustomers().SelectMany(c => c.Transactions.Select(t => new { Customer = c.Name, Transaction = t })).OrderByDescending(x => x.Transaction.Date).ToList();

        if (allTransactions.Count == 0)
        {
            Console.WriteLine("No transactions found.");
            return;
        }

        foreach (var item in allTransactions)
        {
            Console.WriteLine($"{item.Customer}: {item.Transaction}");
        }
        Console.WriteLine($"Total Transactions: {allTransactions.Count}");
    }

    private void SearchCustomerByName()
    {
        Console.Write("Enter Customer Name: ");
        string name = Console.ReadLine();

        var customer = bankService.FindCustomerByName(name);
        if (customer == null)
        {
            Console.WriteLine("Customer not found.");
            return;
        }

        DisplayCustomerDetails(customer);
    }

    private void SearchCustomerByAccount()
    {
        Console.Write("Enter Account Number: ");
        string accountNumber = Console.ReadLine();

        var customer = bankService.FindCustomerByAccount(accountNumber);
        if (customer == null)
        {
            Console.WriteLine("Customer not found.");
            return;
        }

        DisplayCustomerDetails(customer);
    }

    private void DisplayCustomerDetails(Customer customer)
    {
        Console.WriteLine("\n CUSTOMER DETAILS : ");
        Console.WriteLine(customer);
        Console.WriteLine("Transaction History:");
        foreach (var transaction in customer.Transactions.OrderByDescending(t => t.Date))
        {
            Console.WriteLine($"  {transaction}");
        }
    }

    private void CreateAccount()
    {
        Console.Write("Customer name: ");
        string name = Console.ReadLine();
        Console.Write("Age: ");
        if (!int.TryParse(Console.ReadLine(), out int age))
            throw new Exception("Invalid age");

        bankService.CreateAccount(name, age);
    }

    private void Deposit()
    {
        var customer = FindCustomer();
        Console.Write("Amount: ");
        if (!decimal.TryParse(Console.ReadLine(), out decimal amount) || amount <= 0)
            throw new Exception("Invalid amount");

        bankService.Deposit(customer, amount);
    }

    private void Withdraw()
    {
        var customer = FindCustomer();
        Console.Write("Amount: ");
        if (!decimal.TryParse(Console.ReadLine(), out decimal amount) || amount <= 0)
            throw new Exception("Invalid amount");

        bankService.Withdraw(customer, amount);
    }

    private void ShowBalance()
    {
        var customer = FindCustomer();
        Console.WriteLine(customer);
        Console.WriteLine("Transaction history:");
        foreach (var t in customer.Transactions.OrderByDescending(t => t.Date))
            Console.WriteLine(t);
    }

    private Customer FindCustomer()
    {
        Console.Write("Search by (1) Name or (2) Account Number? ");
        string option = Console.ReadLine();

        if (option == "1")
        {
            Console.Write("Customer name: ");
            string name = Console.ReadLine();
            var customer = bankService.FindCustomerByName(name);
            if (customer == null)
                throw new Exception("Customer not found");
            return customer;
        }
        else if (option == "2")
        {
            Console.Write("Account Number: ");
            string accNum = Console.ReadLine();
            var customer = bankService.FindCustomerByAccount(accNum);
            if (customer == null)
                throw new Exception("Customer not found");
            return customer;
        }
        else
        {
            throw new Exception("Invalid option");
        }
    }

    private void FilterTransactions()
    {
        var customer = FindCustomer();
        Console.WriteLine("Filter by : 1) Date  2) Type");
        string option = Console.ReadLine();

        if (option == "1")
        {
            Console.Write("Enter date (yyyy-MM-dd): ");
            string dateInput = Console.ReadLine();
            if (DateTime.TryParse(dateInput, out DateTime date))
            {
                var filtered = bankService.FilterTransactionsByDate(customer, date);

                Console.WriteLine($"Transactions on {date:yyyy-MM-dd}:");
                foreach (var t in filtered)
                    Console.WriteLine(t);

                if (filtered.Count == 0)
                    Console.WriteLine("No transactions found for this date.");
            }
            else
            {
                Console.WriteLine("Invalid date format.");
            }
        }
        else if (option == "2")
        {
            Console.Write("Enter type (Deposit/Withdraw): ");
            string type = Console.ReadLine();
            var filtered = bankService.FilterTransactionsByType(customer, type);

            Console.WriteLine($"Transactions of type '{type}':");
            foreach (var t in filtered)
                Console.WriteLine(t);

            if (filtered.Count == 0)
                Console.WriteLine("No transactions found for this type.");
        }
        else
        {
            Console.WriteLine("Invalid option.");
        }
    }

    private void CalculateTotals()
    {
        var customer = FindCustomer();
        var (deposits, withdrawals) = bankService.CalculateTotals(customer);

        Console.WriteLine($"Total Deposits: {deposits:C}");
        Console.WriteLine($"Total Withdrawals: {withdrawals:C}");
        Console.WriteLine($"Net Change: {(deposits - withdrawals):C}");
    }
}

class Program
{
    static void Main()
    {
        TransactionAlert alert = ShowMessage;
        BankService bankService = new BankService("accounts.txt", alert);
        UserInterface ui = new UserInterface(bankService, alert);

        ui.ShowMainMenu();
    }

    static void ShowMessage(string msg) => Console.WriteLine($"[Alert] {msg}");
}
